// <auto-generated />
using System;
using IOMate.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IOMate.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250907144138_AddClaimGroup")]
    partial class AddClaimGroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IOMate.Domain.Entities.ClaimGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClaimGroups");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.EventEntity<IOMate.Domain.Entities.User>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.ResourceClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClaimGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClaimGroupId");

                    b.ToTable("ResourceClaims");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.UserClaimGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClaimGroupId");

                    b.HasIndex("UserId", "ClaimGroupId")
                        .IsUnique();

                    b.ToTable("UserClaimGroups");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.EventEntity<IOMate.Domain.Entities.User>", b =>
                {
                    b.HasOne("IOMate.Domain.Entities.User", "Entity")
                        .WithMany("Events")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOMate.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.ResourceClaim", b =>
                {
                    b.HasOne("IOMate.Domain.Entities.ClaimGroup", "ClaimGroup")
                        .WithMany("Claims")
                        .HasForeignKey("ClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimGroup");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.UserClaimGroup", b =>
                {
                    b.HasOne("IOMate.Domain.Entities.ClaimGroup", "ClaimGroup")
                        .WithMany("UserClaimGroups")
                        .HasForeignKey("ClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOMate.Domain.Entities.User", "User")
                        .WithMany("UserClaimGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.ClaimGroup", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("UserClaimGroups");
                });

            modelBuilder.Entity("IOMate.Domain.Entities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("UserClaimGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
